name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ENV_FILE: './.env.sample'
  DIR_LOGS: './shared/logs'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      max-parallel: 2
      matrix:
        python-version: [ "3.9", "3.10" ]

    name: Python ${{ matrix.python-version }} version
#
#    services:
#      postgres:
#        image: postgres:latest
#        env:
#          POSTGRES_DB: postgres
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_USER: postgres
#        ports:
#          - 5432:5432
#        # Set health checks to wait until postgres has started
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Import environment variables from the file
      run: cat ${{ env.ENV_FILE }} >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/prod.txt
        pip install -r src/tests/functional/requirements.txt
        pip install black sort-requirements mypy flake8-html

    - name: Check formatting
      run: black --check .

    - name: Autoformat if needed
      if: failure()
      run: |
        black .
        git config --global user.name 'v-v-d'
        git config --global user.email 'v-v-d@bk.ru'
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
        git fetch
        git checkout $GITHUB_HEAD_REF
        git commit -am "fixup: Format Python code with Black"
        git push

    - name: Check sorting requirements
      run: sort-requirements --check ./requirements/base.txt ./requirements/dev.txt ./requirements/prod.txt ./src/tests/functional/requirements.txt

    - name: Autosort requirements if needed
      if: failure()
      run: |
        sort-requirements ./requirements/base.txt ./requirements/dev.txt ./requirements/prod.txt ./src/tests/functional/requirements.txt
        git config --global user.name 'v-v-d'
        git config --global user.email 'v-v-d@bk.ru'
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
        git fetch
        git checkout $GITHUB_HEAD_REF
        git commit -am "fixup: requirements.txt sorted"
        git push

    - name: Tests
      if: always()
      run: pytest -p no:warnings --cov-report=xml --cov=src/app --cov=src/etl src/tests

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage/reports/
        env_vars: OS,PYTHON
        fail_ci_if_error: true
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        path_to_write_report: ./coverage/codecov_report.txt
        verbose: true

    - name: Lint
      if: always()
      run: |
        rm -rf ./lint-report
        flake8 ./src --per-file-ignores="__init__.py:F401" --inline-quotes '"' --format=html --htmldir=lint-report

    - name: Update lint report
      if: always()
      run: |
        git config --global user.name 'v-v-d'
        git config --global user.email 'v-v-d@bk.ru'
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
        git fetch
        git checkout $GITHUB_HEAD_REF
        git add ./lint-report
        git commit -am "Lint report updated"
        git push

    - name: Static type checking
      if: always()
      run: mypy ./src

    - name: Send message to telegram
      if: always()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          ${{ github.actor }} created commit:
          Commit message: ${{ github.event.commits[0].message }}
          
          Repository: ${{ github.repository }}
          
          See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
          
          Python ${{ matrix.python-version }} version CI status: ${{ job.status }}
